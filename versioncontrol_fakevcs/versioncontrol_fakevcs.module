<?php
// $Id$
/**
 * @file
 * FakeVCS backend for Version Control API -
 * An example module illustrating how to write a VCS backend.
 *
 * Copyright 2007 by Jakob Petsovits ("jpetso", http://drupal.org/user/56020)
 */

/**
 * Implementation of hook_versioncontrol_backends().
 *
 * @return
 *   A structured array containing information about this known backends.
 *   Array key is the unique string identifier of the version control system.
 *   The corresponding array values are again structured arrays and consist
 *   of elements with the following keys:
 *
 *   'name': The user-visible name of the VCS.
 *   'description': A short description of the backend, if possible not longer
 *                  than one or two sentences.
 *   'capabilities': An array listing optional capabilities, in addition to the
 *                   required functionality like retrieval of detailed
 *                   commit information. Array values can be an arbitrary
 *                   combination of VERSIONCONTROL_CAPABILITY_* values. If no
 *                   additional capabilities are supported by the backend,
 *                   this array will be empty.
 *   'autoadd': An array listing which tables should be managed by
 *              Version Control API instead of doing it manually in the backend.
 *              If no array additions should be automatically managed,
 *              this array will be empty.
 */
versioncontrol_fakevcs_versioncontrol_backends() {
  // Our example VCS is called FakeVCS, and supports all possible capabilities.

  return array(
    // The array key is up to 8 characters long, and used as unique identifier
    // for this VCS, in functions, URLs and in the database.
    'fakevcs' => array(
      // The user-visible name of the VCS.
      'name' => 'FakeVCS',

      // A short description of the VCS, if possible not longer than one or two sentences.
      'description' => t('FakeVCS is a version control system that is specifically capable in doing everything that any other version control system might ever do.'),

      // A list of optional capabilities, in addition to the required retrieval
      // of detailed commit information. All allowed values are listed below.
      'capabilities' => array(
        // Able to programmatically create a new repository at a specified
        // location in the file system.
        VERSIONCONTROL_CAPABILITY_CREATE_REPOSITORY,

        // Able to programmatically create and delete user accounts for the
        // specific VCS, and assign or deny them access permission for certain
        // directories in a repository.
        VERSIONCONTROL_CAPABILITY_ACCOUNT_MANAGEMENT,

        // Able to cancel commits if the committer lacks permissions to commit
        // to specific directories.
        VERSIONCONTROL_CAPABILITY_DIRECTORY_RESTRICTIONS,

        // Able to cancel commits if the committer lacks permissions to commit
        // to specific branches or tags.
        VERSIONCONTROL_CAPABILITY_BRANCH_TAG_RESTRICTIONS,

        // Able to retrieve a file or its revision number based on a global
        // revision identifier.
        VERSIONCONTROL_CAPABILITY_ATOMIC_COMMITS,

        // Able to get the list of all current files and directories in a given
        // version controlled directory, along with revision identifiers for
        // each of the files. Comes in handy for repository browsing.
        VERSIONCONTROL_CAPABILITY_LIST_FILES,
      ),

      // An array listing which tables should be managed by Version Control API
      // instead of doing it manually in the backend.
      // All allowed values are listed below.
      'flags' => array(
        // versioncontrol_insert_repository() will automatically insert
        // array elements from $repository['[xxx]_specific'] into
        // {versioncontrol_[xxx]_repositories} and versioncontrol_get_repositories()
        // will automatically fetch it from there.
        VERSIONCONTROL_FLAG_AUTOADD_REPOSITORIES,

        // versioncontrol_insert_commit() will automatically insert
        // array elements from $commit['[xxx]_specific'] into
        // {versioncontrol_[xxx]_commits} and versioncontrol_get_commits()
        // will automatically fetch it from there.
        VERSIONCONTROL_FLAG_AUTOADD_COMMITS,
      ),
    ),

    // More backend entries are possible - modules probably won't need this,
    // but let's still provide the opportunity to do so, for consistency
    // with similar hooks from other modules and easier merging of the arrays.
  );
}

/**
 * Implementation of [versioncontrol_backend]_alter_repositories():
 * Add VCS specific repository data into a $repository['[xxx]_specific'] array.
 * By convention, this function only adds data in this specific element
 * and doesn't modify other parts of the repository array.
 *
 * Also, this function is optional for backend modules to implement. If you
 * don't need custom additions to the repositories, just don't implement it.
 *
 * @param $repositories
 *   The repositories for which this backend module needs to retrieve
 *   additional repository data. This is an array like the one returned by
 *   versioncontrol_get_repositories(), and even the '[xxx]_specific' array
 *   already exists. (If the VERSIONCONTROL_FLAG_AUTOADD_REPOSITORIES flag
 *   has been set by this module, it may even be filled with values already.)
 */
versioncontrol_fakevcs_alter_repositories(&$repositories) {
  $repositories[$repo_id]['fakevcs_specific']['modules'] = array('drupal', 'contributions');
}

/**
 * Implementation of [versioncontrol_backend]_filter_commits():
 * Unset commits that don't match any of the given constraints.
 *
 * @param $commits
 *   The original array of commits retrieved by versioncontrol_get_commits().
 *   The filtered version will naturally be a subset of those.
 * @param $branches
 *   An array of strings, specified separately for each repository,
 *   like array($repo_id => array('HEAD', 'DRUPAL-5')).
 *   If given, only commits on the given branches will be returned.
 * @param paths
 *   An array of strings (item locations), specified separately for
 *   each repository, like
 *     array($repo_id => array(
 *       '/trunk/contributions/modules/versioncontrol',
 *       '/trunk/contributions/themes/b2',
 *     )).
 *   If given, only commits that affected this item (or its children,
 *   in case the item is a directory) will be returned.
 * @param $fakevcs_specific
 *   An array of FakeVCS specific constraints. Say, if FakeVCS supported
 *   modules like the CVS ones, the array would contain a 'modules' element
 *   for filtering by module.
 */
versioncontrol_fakevcs_filter_commits(&$commits, $branches = NULL, $paths = NULL, $fakevcs_specific = NULL) {
  foreach($commits as $key => $commit) {
    if ($constraint == 'matched') {
      continue;
    }
    else if ($other_constraint == 'matched') {
      continue;
    }
    else {
      unset($commits[$key]);
    }
  }
}

/**
 * Implementation of [versioncontrol_backend]_alter_commits():
 * Add VCS specific repository data into a $commit['[xxx]_specific'] array.
 * By convention, this function only adds data in this specific element
 * and doesn't modify other parts of the commit array.
 *
 * Also, this function is optional for backend modules to implement. If you
 * don't need custom additions to the commits, just don't implement it.
 *
 * @param $commits
 *   The commits for which this backend module needs to retrieve additional
 *   commit data. This is an array like the one returned by
 *   versioncontrol_get_commits(), and even the '[xxx]_specific' array
 *   already exists. (If the VERSIONCONTROL_FLAG_AUTOADD_COMMITS flag has been
 *   set by this module, it may even be filled with values already.)
 */
versioncontrol_fakevcs_alter_commits($commits) {
  $repositories[$repo_id]['fakevcs_specific']['branch'] = 'HEAD';
}


/**
 * Implementation of [versioncontrol_backend]_get_authors_by_uid():
 * Retrieve a Drupal uid / VCS username mapping given a set of user ids.
 * Non-existing uids are discarded and don't appear in the result value.
 *
 * @param $uid_list
 *   An array containing Drupal user ids.
 * @param $repositories
 *   An array of structured arrays containing repository information,
 *   presumably a subset of what is returned by versioncontrol_get_repositories().
 *   If given, only usernames of this specific repository are retrieved.
 *
 * @return
 *   A structured array that looks like
 *   array($drupal_uid => array($repo_id => 'VCS username', ...), ...).
 *   If no system specific VCS usernames correlate to the given uids,
 *   an empty array is returned.
 */
function versioncontrol_fakevcs_get_authors_by_uid($uid_list, $repositories = NULL) {
  // Let's say $uid_list == array(1, 56020, -328) and $repositories == NULL:
  return array(
    1 => array(
      $core_repo_id => 'dries',
      $contrib_repo_id => 'dries',
    ),
    56020 => array(
      $contrib_repo_id => 'jpetso',
    ),
  );
}

/**
 * Implementation of [versioncontrol_backend]_get_authors_by_username():
 * Retrieve a Drupal uid / VCS username mapping given a set of usernames.
 * Non-existing usernames are discarded and don't appear in the result value.
 *
 * @param $usernames_by_repository
 *   An array containing system specific VCS usernames. Specified separately
 *   for each repository, like array($repo_id => array('dww', 'jpetso'), ...).
 * @param $repositories
 *   A list of all repository arrays that the $usernames_by_repository
 *   references with its repo_id keys.
 *
 * @return
 *   A structured array that looks like
 *   array($drupal_uid => array($repo_id => 'VCS username', ...), ...).
 *   If no Drupal uids correlate to the given usernames,
 *   an empty array is returned.
 */
function versioncontrol_fakevcs_get_authors_by_username($usernames_by_repository, $repositories) {
  // Let's say $usernames_by_repository == array(
  //   $core_repo_id => array('dries', 'jpetso', 'doesntexist'),
  //   $contrib_repo_id => array('dries', 'jpetso', 'doesntexist'),
  // )
  // and $repositories == array(
  //   $core_repo_id => $core_repository,
  //   $contrib_repo_id => $contrib_repository,
  // ).

  return array(
    1 => array(
      $core_repo_id => 'dries',
      $contrib_repo_id => 'dries',
    ),
    56020 => array(
      $contrib_repo_id => 'jpetso',
    ),
  );
}


/**
 * Implementation of [versioncontrol_backend]_get_commit_actions():
 * Retrieves detailed information about what happened in a single commit.
 *
 * @param $commit
 *   The commit whose actions should be retrieved.
 *
 * @return
 *   A structured array containing the exact details of what happened to
 *   each item in this commit. Array keys are the current/new paths, also for
 *   VERSIONCONTROL_ACTION_DELETED actions even if the file actually doesn't
 *   exist anymore. The corresponding array values are again structured arrays
 *   and consist of elements with the following keys:
 *
 *   'action': Specifies how the item was modified.
 *             One of the predefined VERSIONCONTROL_ACTION_* values.
 *   'modified': Boolean value, specifies if a file was modified in addition
 *               to the other action in the 'action' element of the array.
 *               Only exists for the VERSIONCONTROL_ACTION_MOVED
 *               and VERSIONCONTROL_ACTION_COPIED actions.
 *   'current item': The updated state of the modified item. Exists for all
 *                   actions except VERSIONCONTROL_ACTION_DELETED.
 *   'source items': An array with the previous state(s) of the modified item.
 *                   Path and branch will always be the same as in the current
 *                   item except for the VERSIONCONTROL_ACTION_MOVED,
 *                   VERSIONCONTROL_ACTION_COPIED and
 *                   VERSIONCONTROL_ACTION_MERGED actions.
 *                   Exists for all actions except VERSIONCONTROL_ACTION_ADDED.
 *
 *   Item values are structured arrays and consist of elements
 *   with the following keys:
 *
 *   'type': Specifies the item type, which is either
 *           VERSIONCONTROL_ITEM_FILE or VERSIONCONTROL_ITEM_DIRECTORY.
 *   'path': The path of the item at the specific revision.
 *   'revision': The (file-level) revision when the item was changed.
 *               If there is no such revision (which may be the case for
 *               directory items) then the 'revision' element is NULL.
 *   '[xxx]_specific': May be set by the backend to remember additional
 *                     item info. ("[xxx]" is the unique string identifier
 *                     of the respective version control system.)
 */
function versioncontrol_fakevcs_get_commit_actions($commit) {
  // Assuming $commit is a single commit array that looks like this:
  $commit = array(
    // The commit id, a simple running number. Doesn't have any specific
    // meaning, but is necessary for indexing and joining tables.
    'commit_id' => 2345,
    // The repository that was affected by this commit.
    'repository' => $affected_repository,
    // The time when the commit was executed, in Unix timestamp format.
    'date' => time(),
    // User id of the committer's Drupal user account.
    // 0 if no corresponding account exists.
    'uid' => $user->uid,
    // The committer's username known to the repository itself. In most cases
    // this will probably be the name of the committer's Unix user account.
    'username' => 'jpetso',
    // The commit message, which is expected to span one or more lines.
    'message' => 'All kinds of demonstrative changes.',
    // The revision identifier of the commit, in the VCS's proprietary format -
    // running number, SHA-1 hash, or whatever. If there is no single revision
    // identifier for the whole commit (which should only be the case for CVS)
    // then the value for this key is set to NULL.
    'revision' => '404', // for this commit, let's assume this is an SVN repository
  );

  return array(
    // VERSIONCONTROL_ACTION_ADDED action: contains 'action' and 'current item'
    '/trunk/contributions/modules/versioncontrol/versioncontrol.module' => array(
      'action'       => VERSIONCONTROL_ACTION_ADDED,
      'current item' => array(
        'type'     => VERSIONCONTROL_ITEM_FILE,
        'path'     => '/trunk/contributions/modules/versioncontrol/versioncontrol.module',
        'revision' => '404',
      ),
    ),
    // VERSIONCONTROL_ACTION_MODIFIED action:
    // contains 'action, 'current item' and exacly one piece of 'source items'
    '/trunk/contributions/modules/versioncontrol/versioncontrol.install' => array(
      'action'       => VERSIONCONTROL_ACTION_MODIFIED,
      'current item' => array(
        'type'     => VERSIONCONTROL_ITEM_FILE,
        'path'     => '/trunk/contributions/modules/versioncontrol/versioncontrol.install',
        'revision' => '404',
      ),
      'source items' => array(
        array(
          'type'     => VERSIONCONTROL_ITEM_FILE,
          'path'     => '/trunk/contributions/modules/versioncontrol/versioncontrol.install',
          'revision' => '354',
        ),
      ),
    ),
    // VERSIONCONTROL_ACTION_DELETED action:
    // contains 'action' and exacly one piece of 'source items'
    '/branches/sandbox/jpetso/versioncontrol-notes.txt' => array(
      'action'            => VERSIONCONTROL_ACTION_DELETED,
      'source items' => array(
        array(
          'type'     => VERSIONCONTROL_ITEM_FILE,
          'path'     => '/branches/sandbox/jpetso/versioncontrol-notes.txt',
          'revision' => '41',
        ),
      ),
    ),
    // VERSIONCONTROL_ACTION_MOVED action:
    // contains 'action', 'current item' and exacly one piece of 'source items'
    '/trunk/contributions/modules/versioncontrol/versioncontrol.info' => array(
      'action'            => VERSIONCONTROL_ACTION_MOVED,
      'modified'          => TRUE,
      'current item' => array(
        'type'     => VERSIONCONTROL_ITEM_FILE,
        'path'     => '/trunk/contributions/modules/versioncontrol/versioncontrol.info',
        'revision' => '404',
      ),
      'source items' => array(
        array(
          'type'     => VERSIONCONTROL_ITEM_FILE,
          'path'     => '/branches/sandbox/jpetso/versioncontrol.info',
          'revision' => '41',
        ),
      ),
    ),
    // VERSIONCONTROL_ACTION_COPIED action:
    // contains 'action', 'current item' and exacly one piece of 'source items'
    '/trunk/contributions/modules/versioncontrol/README.txt' => array(
      'action'            => VERSIONCONTROL_ACTION_COPIED,
      'modified'          => FALSE,
      'current item' => array(
        'type'     => VERSIONCONTROL_ITEM_FILE,
        'path'     => '/trunk/contributions/modules/versioncontrol/README.txt',
        'revision' => '404',
      ),
      'source items' => array(
        array(
          'type'     => VERSIONCONTROL_ITEM_FILE,
          'path'     => '/branches/sandbox/jpetso/README-template.txt',
          'revision' => '220',
        ),
      ),
    ),
    // VERSIONCONTROL_ACTION_MERGED action: contains 'action',
    // 'current item' and an arbitrary number of 'source items'
    '/trunk/contributions/modules/versioncontrol/versioncontrol_fakevcs/versioncontrol_fakevcs.module' => array(
      'action'            => VERSIONCONTROL_ACTION_MERGED,
      'current item' => array(
        'type'     => VERSIONCONTROL_ITEM_FILE,
        'path'     => '/trunk/contributions/modules/versioncontrol/versioncontrol_fakevcs/versioncontrol_fakevcs.module',
        'revision' => '404',
      ),
      'source items' => array(
        array(
          'type'     => VERSIONCONTROL_ITEM_FILE,
          'path'     => '/trunk/contributions/modules/versioncontrol/versioncontrol_fakevcs/versioncontrol_fakevcs.module',
          'revision' => '403',
        ),
        array(
          'type'     => VERSIONCONTROL_ITEM_FILE,
          'path'     => '/branches/work/versioncontrol-improve-data-structures/data-structures.php',
          'revision' => '198',
        ),
      ),
    ),
    // VERSIONCONTROL_ITEM_DIRECTORY type actions can occur with 'action' being
    // one of VERSIONCONTROL_ACTION_MOVED, VERSIONCONTROL_ACTION_COPIED
    // and VERSIONCONTROL_ACTION_DELETED.
    // Other than that, same style as VERSIONCONTROL_ITEM_FILE actions.
    '/branches/5.x-1.x/contributions/modules/cvslog' => array(
      'action'       => VERSIONCONTROL_ACTION_COPIED,
      'modified'     => FALSE, // for directories, this may always be false
      'current item' => array(
        'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
        'path'     => '/branches/5.x-1.x/contributions/modules/cvslog',
        'revision' => '404',
      ),
      'source items' => array(
        array(
          'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
          'path'     => '/trunk/contributions/modules/cvslog',
          'revision' => '397',
        ),
      ),
    ),
    // one more VERSIONCONTROL_ITEM_DIRECTORY example
    '/trunk/contributions/modules/versioncontrol/versioncontrol_fakevcs' => array(
      'action'   => VERSIONCONTROL_ACTION_ADDED,
      'current item' => array(
        'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
        'path'     => '/trunk/contributions/modules/versioncontrol/versioncontrol_fakevcs',
        'revision' => '404',
      ),
    ),
  );
}

/**
 * Implementation of [versioncontrol_backend]_get_commit_branches():
 * Retrieve the branches that have been affected by the given commit.
 *
 * @return
 *   An array of strings that identify a branch in the respective repository,
 *   or an empty array if no branches were affected at all.
 */
function versioncontrol_fakevcs_get_commit_branches($commit) {
  // How CVS would probably do it
  return array('DRUPAL-5');
  // How SVN could also do it
  return array('trunk', '5.x-1.x');
}

/**
 * Implementation of [versioncontrol_backend]_get_item_branches():
 * Retrieve all branches that exist for the given item $path, and how this item
 * is named there. The main branch ('HEAD', 'trunk', 'master' or however it is
 * called in the respective VCS) is also included in the result.
 *
 * @param $repository
 *   The repository that the item is located in.
 * @param $item
 *   The item whose set of branches should be retrieved.
 *
 * @return
 *   A structured array that looks like
 *     array(
 *       $branch1_name => $branch1_item,
 *       $branch2_name => $branch2_item,
 *       ...
 *     ).
 *
 *   The corresponding item values are again structured arrays
 *   and consist of elements with the following keys:
 *
 *   'type': Specifies the item type, which is either
 *           VERSIONCONTROL_ITEM_FILE or VERSIONCONTROL_ITEM_DIRECTORY.
 *   'path': The path of the item at the specific revision.
 *   'revision': The (file-level) revision when the item was last changed.
 *               If there is no such revision (which may be the case for
 *               directory items) then the 'revision' element is NULL.
 *   '[xxx]_specific': May be set by the backend to remember additional
 *                     item info. ("[xxx]" is the unique string identifier
 *                     of the respective version control system.)
 *
 *   An empty array is returned if there are no branches for this item.
 *   NULL is returned if the given item is not inside the repository at the
 *   time of 'revision'.
 */
function versioncontrol_fakevcs_get_item_branches($repository, $item) {
  // How CVS would probably do it, if for example
  // $item['path'] == '/contributions/modules/versioncontrol/versioncontrol.module':
  return array(
    'HEAD' => array(
      'type'     => VERSIONCONTROL_ITEM_FILE,
      'path'     => '/contributions/modules/versioncontrol/versioncontrol.module',
      'revision' => '1.23',
      'fakevcs_specific' => array('selected branch' => 'HEAD'),
    ),
    'DRUPAL-5' => array(
      'type'     => VERSIONCONTROL_ITEM_FILE,
      'path'     => '/contributions/modules/versioncontrol/versioncontrol.module',
      'revision' => '1.23.2.41',
      'fakevcs_specific' => array('selected branch' => 'DRUPAL-5'),
    ),
  );
  // How SVN could also do it, if for example
  // $item['path'] == '/trunk/contributions/modules/versioncontrol':
  return array(
    'trunk' => array(
      'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
      'path'     => '/trunk/contributions/modules/versioncontrol',
      'revision' => '23',
    ),
    '5.x-1.x' => array(
      'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
      'path'     => '/branches/5.x-1.x/contributions/modules/versioncontrol',
      'revision' => '41',
    ),
  );
}

/**
 * Implementation of [versioncontrol_backend]_get_item_tags():
 * Retrieve all tags that exist for the given item $path, and how this item
 * is named there.
 *
 * @param $repository
 *   The repository that the item is located in.
 * @param $item
 *   The item whose set of tags should be retrieved.
 *
 * @return
 *   A structured array that looks like
 *     array(
 *       $tag1_name => $tag1_item,
 *       $tag2_name => $tag2_item,
 *       ...
 *     ).
 *
 *   The corresponding item values are again structured arrays
 *   and consist of elements with the following keys:
 *
 *   'type': Specifies the item type, which is either
 *           VERSIONCONTROL_ITEM_FILE or VERSIONCONTROL_ITEM_DIRECTORY.
 *   'path': The path of the item at the specific revision.
 *   'revision': The (file-level) revision when the item was last changed.
 *               If there is no such revision (which may be the case for
 *               directory items) then the 'revision' element is NULL.
 *   '[xxx]_specific': May be set by the backend to remember additional
 *                     item info. ("[xxx]" is the unique string identifier
 *                     of the respective version control system.)
 *
 *   An empty array is returned if there are no tags for this item.
 *   NULL is returned if the given item is not inside the repository at the
 *   time of 'revision'.
 */
function versioncontrol_fakevcs_get_item_tags($repository, $item) {
  // How CVS would probably do it, if for example
  // $item['path'] == '/contributions/modules/versioncontrol':
  return array(
    'DRUPAL-5--1-1' => array(
      'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
      'path'     => '/contributions/modules/versioncontrol',
      'revision' => NULL, // Right, it's a directory in CVS -> unversioned.
                          // Files of course would indeed get a 'revision' entry.
      'fakevcs_specific' => array('tag' => 'DRUPAL-5--1-1'),
    ),
    'DRUPAL-5--1-2' => array(
      'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
      'path'     => '/contributions/modules/versioncontrol',
      'revision' => NULL,
      'fakevcs_specific' => array('tag' => 'DRUPAL-5--1-2'),
    ),
  );

  // How SVN could also do it, if for example
  // $item['path'] == '/tags/5.x-1.2/contributions/modules/versioncontrol/versioncontrol.module':
  return array(
    '5.x-1.1' => array(
      'type'     => VERSIONCONTROL_ITEM_FILE,
      'path'     => '/tags/5.x-1.1/contributions/modules/versioncontrol/versioncontrol.module',
      'revision' => '15',
    ),
    '5.x-1.2' => array(
      'type'     => VERSIONCONTROL_ITEM_FILE,
      'path'     => '/tags/5.x-1.2/contributions/modules/versioncontrol/versioncontrol.module',
      'revision' => '16',
    ),
  );
}

/**
 * Implementation of [versioncontrol_backend]_get_item_history():
 * Retrieve the revisions where the given item has been changed,
 * in reverse chronological order.
 *
 * Only direct descendants or predecessors of this item will be retrieved.
 * That means that history of the same item in a different (parallel) branch
 * will not be returned, except if the given state of the item was moved/copied
 * from there or goes back there in a more recent revision. In short, you'll
 * not get "1.7" and "1.2.2.4" items side by side if it doesn't make sense.
 *
 * @param $repository
 *   The repository that the item is located in.
 * @param $item
 *   The item whose history should be retrieved.
 *
 * @return
 *   An array containing the exact details of all item changes. Each element
 *   of the array is a structured array consisting of elements with the
 *   following keys:
 *
 *   'action': Specifies how the item was modified.
 *             One of the predefined VERSIONCONTROL_ACTION_* values.
 *   'modified': Boolean value, specifies if a file was modified in addition
 *               to the other action in the 'action' element of the array.
 *               Only exists for the VERSIONCONTROL_ACTION_MOVED
 *               and VERSIONCONTROL_ACTION_COPIED actions.
 *   'current item': The updated state of the modified item. Exists for all
 *                   actions except VERSIONCONTROL_ACTION_DELETED.
 *   'source items': An array with the previous state(s) of the modified item.
 *                   Path and branch will always be the same as in the current
 *                   item except for the VERSIONCONTROL_ACTION_MOVED,
 *                   VERSIONCONTROL_ACTION_COPIED and
 *                   VERSIONCONTROL_ACTION_MERGED actions.
 *                   Exists for all actions except VERSIONCONTROL_ACTION_ADDED.
 *
 *   Item values are structured arrays and consist of elements
 *   with the following keys:
 *
 *   'type': Specifies the item type, which is either
 *           VERSIONCONTROL_ITEM_FILE or VERSIONCONTROL_ITEM_DIRECTORY.
 *   'path': The path of the item at the specific revision.
 *   'revision': The (file-level) revision when the item was changed.
 *               If there is no such revision (which may be the case for
 *               directory items) then the 'revision' element is NULL.
 *   '[xxx]_specific': May be set by the backend to remember additional
 *                     item info. ("[xxx]" is the unique string identifier
 *                     of the respective version control system.)
 *
 *   NULL is returned if the given item is not under version control,
 *   or was not under version control at the time of the given revision.
 */
function versioncontrol_get_item_history($repository, $item) {
  // Assuming $item is an item array that looks like this:
  $item = array(
    'type'     => VERSIONCONTROL_ITEM_FILE,
    'path'     => '/trunk/contributions/modules/versioncontrol/versioncontrol.info',
    'revision' => '666',
  );
  // and $repository is some SVN repository.

  return array(
    array(
      'action'       => VERSIONCONTROL_ACTION_MOVED,
      'current item' => array(
        'type'         => VERSIONCONTROL_ITEM_FILE,
        'path'         => '/trunk/contributions/modules/versioncontrol/versioncontrol.info',
        'revision'     => '404',
      ),
      'source items' => array(
        array(
          'type'       => VERSIONCONTROL_ITEM_FILE,
          'revision'   => '41',
          'path'       => '/branches/sandbox/jpetso/versioncontrol.info',
        ),
      ),
      'modified'     => FALSE,
    ),
    array(
      'action'       => VERSIONCONTROL_ACTION_ADDED,
      'current item' => array(
        'type'         => VERSIONCONTROL_ITEM_FILE,
        'revision'     => '41',
        'path'         => '/branches/sandbox/jpetso/versioncontrol.info',
      ),
    ),
  );
}

/**
 * Implementation of [versioncontrol_backend]_get_directory_contents():
 * Retrieve the set of files and directories that exist at a specified revision
 * in the given directory inside the repository.
 *
 * @param $repository
 *   The repository that the directory item is located in.
 * @param $directory_item
 *   The parent item of the the items that should be listed.
 * @param $recursive
 *   If FALSE, only the direct children of $path will be retrieved.
 *   If TRUE, you'll get every single descendant of $path.
 *
 * @return
 *   A structured item array containing the exact details of which items have
 *   been inside the directory at the time of the commit, including the
 *   directory itself. Array keys are the current/new paths.
 *   The corresponding item values are again structured arrays
 *   and consist of elements with the following keys:
 *
 *   'type': Specifies the item type, which is either
 *           VERSIONCONTROL_ITEM_FILE or VERSIONCONTROL_ITEM_DIRECTORY.
 *   'path': The path of the item at the specific revision.
 *   'revision': The (file-level) revision when the item was last changed.
 *               If there is no such revision (which may be the case for
 *               directory items) then the 'revision' element is NULL.
 *   '[xxx]_specific': May be set by the backend to remember additional
 *                     item info. ("[xxx]" is the unique string identifier
 *                     of the respective version control system.)
 *
 *   NULL is returned if the given item is not inside the repository,
 *   or if it is not a directory item at all.
 */
function versioncontrol_fakevcs_get_directory_contents($repository, $directory_item, $recursive = FALSE) {
  // Assuming $parent_item is an item array that looks like this:
  $directory_item = array(
    'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
    'path'     => '/trunk/contributions/modules/versioncontrol',
    'revision' => '666',
  );
  // $repository is some SVN repository and $recursive == FALSE.

  return array(
    '/trunk/contributions/modules/versioncontrol' => array( // == rtrim($path, '/')
      'type'      => VERSIONCONTROL_ITEM_DIRECTORY,
      'path'      => '/trunk/contributions/modules/versioncontrol',
      'revision'  => '502',
    ),
    '/trunk/contributions/modules/versioncontrol/versioncontrol.module' => array(
      'type'      => VERSIONCONTROL_ITEM_FILE,
      'path'      => '/trunk/contributions/modules/versioncontrol/versioncontrol.module',
      'revision'  => '502',
    ),
    '/trunk/contributions/modules/versioncontrol/versioncontrol.info' => array(
      'type'      => VERSIONCONTROL_ITEM_FILE,
      'path'      => '/trunk/contributions/modules/versioncontrol/versioncontrol.info',
      'revision'  => '404',
    ),
    '/trunk/contributions/modules/versioncontrol/versioncontrol.install' => array(
      'type'      => VERSIONCONTROL_ITEM_FILE,
      'path'      => '/trunk/contributions/modules/versioncontrol/versioncontrol.install',
      'revision'  => '404',
    ),
    '/trunk/contributions/modules/versioncontrol/README.txt' => array(
      'type'      => VERSIONCONTROL_ITEM_FILE,
      'path'      => '/trunk/contributions/modules/versioncontrol/README.txt',
      'revision'  => '404',
    ),
    '/trunk/contributions/modules/versioncontrol/versioncontrol_fakevcs' => array(
      'type'      => VERSIONCONTROL_ITEM_DIRECTORY,
      'path'      => '/trunk/contributions/modules/versioncontrol/versioncontrol_fakevcs.txt',
      'revision'  => '497',
    ),
  );

  // Or the same thing in CVS - note that 'revision' is NULL for directories,
  // as CVS doesn't support versioned directories.
  $directory_item = array(
    'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
    'path'     => '/contributions/modules/versioncontrol',
    'revision' => NULL,
  );
  // $repository is some CVS repository and $recursive == TRUE.

  return array(
    '/contributions/modules/versioncontrol' => array( // == rtrim($path, '/')
      'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
      'path'     => '/contributions/modules/versioncontrol',
      'revision' => NULL, // CVS doesn't track directory-level revisions
    ),
    '/contributions/modules/versioncontrol/versioncontrol.module' => array(
      'type'     => VERSIONCONTROL_ITEM_FILE,
      'path'     => '/contributions/modules/versioncontrol/versioncontrol.module',
      'revision' => '1.19',
    ),
    '/contributions/modules/versioncontrol/versioncontrol.info' => array(
      'type'     => VERSIONCONTROL_ITEM_FILE,
      'path'     => '/contributions/modules/versioncontrol/versioncontrol.info',
      'revision' => '1.1',
    ),
    '/contributions/modules/versioncontrol/versioncontrol.install' => array(
      'type'     => VERSIONCONTROL_ITEM_FILE,
      'path'     => '/contributions/modules/versioncontrol/versioncontrol.install',
      'revision' => '1.5',
    ),
    '/contributions/modules/versioncontrol/README.txt' => array(
      'type'     => VERSIONCONTROL_ITEM_FILE,
      'path'     => '/contributions/modules/versioncontrol/README.txt',
      'revision' => '1.1',
    ),
    '/contributions/modules/versioncontrol/fakevcs_backend' => array(
      'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
      'path'     => '/contributions/modules/versioncontrol/fakevcs_backend',
      'revision' => NULL,
    ),
    '/contributions/modules/versioncontrol/fakevcs_backend/fakevcs_backend.module' => array(
      'type'     => VERSIONCONTROL_ITEM_FILE_DELETED, // only for non-atomic-commit VCSs (= CVS)
      'path'     => '/contributions/modules/versioncontrol/fakevcs_backend/fakevcs_backend.module',
      'revision' => '1.11', // last existing version
    ),
    '/contributions/modules/versioncontrol/versioncontrol_fakevcs' => array(
      'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
      'path'     => '/contributions/modules/versioncontrol/versioncontrol_fakevcs',
      'revision' => NULL,
    ),
    '/contributions/modules/versioncontrol/versioncontrol_fakevcs/versioncontrol_fakevcs.module' => array(
      'type'     => VERSIONCONTROL_ITEM_FILE,
      'path'     => '/contributions/modules/versioncontrol/versioncontrol_fakevcs/versioncontrol_fakevcs.module',
      'revision' => '1.2',
    ),
  );

  // And when an item comes in that has been marked with another branch or tag,
  // then use that one instead of the main branch.
  $directory_item = array(
      'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
      'path'     => '/contributions/modules/versioncontrol/versioncontrol_fakevcs',
      'revision' => NULL,
      'fakevcs_specific' => array('selected branch' => 'DRUPAL-5'),
    ),
  // $repository is some CVS repository and $recursive == FALSE.

  return array(
    '/contributions/modules/versioncontrol/versioncontrol_fakevcs' => array(
      'type'     => VERSIONCONTROL_ITEM_DIRECTORY,
      'path'     => '/contributions/modules/versioncontrol/versioncontrol_fakevcs',
      'revision' => NULL,
      'fakevcs_specific' => array('selected branch' => 'DRUPAL-5'),
    ),
    '/contributions/modules/versioncontrol/versioncontrol_fakevcs/versioncontrol_fakevcs.module' => array(
      'type'     => VERSIONCONTROL_ITEM_FILE,
      'path'     => '/contributions/modules/versioncontrol/versioncontrol_fakevcs/versioncontrol_fakevcs.module',
      'revision' => '1.2',
      'fakevcs_specific' => array('selected branch' => 'DRUPAL-5'),
    ),
  );
}

/**
 * Implementation of [versioncontrol_backend]_get_file_contents():
 * Retrieve the text or binary data of the given file in the specified commit.
 *
 * This function is optional for VCS backends to implement, be sure to check
 * with versioncontrol_backend_implements($repository['vcs'], 'get_file_contents')
 * if the particular backend actually implements it.
 *
 * @param $repository
 *   The repository that the file item is located in.
 * @param $file_item
 *   The file item whose contents should be retrieved.
 *
 * @return
 *   A structured array that consists of elements with the following keys:
 *
 *   'file type': Specifies the file type, which is either
 *                VERSIONCONTROL_FILE_TEXT or VERSIONCONTROL_FILE_BINARY.
 *   'contents': The raw contents of the file.
 *
 *   NULL is returned if the given item is not under version control,
 *   or was not under version control at the time of $commit, or if it is
 *   not a file item at all, or if the specific backend module does not
 *   implement retrieving file contents.
 */
function versioncontrol_fakevcs_get_file_contents($repository, $file_item) {
  // In case the file is marked as text file:
  return array(
    'file type' => VERSIONCONTROL_FILE_TEXT,
    'contents'  => $file_contents,
  );

  // In case the file is marked as binary file:
  return array(
    'file type' => VERSIONCONTROL_FILE_BINARY,
    'contents'  => $file_contents,
  );
}

/**
 * Implementation of [versioncontrol_backend]_get_file_annotation():
 * Retrieve an array where each element represents a single line of the
 * given file in the specified commit, annotated with the committer who last
 * modified that line. Note that annotations are generally a quite slow
 * operation, so expect this function to take a bit more time as well.
 *
 * This function is optional for VCS backends to implement, be sure to check
 * with versioncontrol_backend_implements($repository['vcs'], 'get_file_annotation')
 * if the particular backend actually implements it.
 *
 * @param $repository
 *   The repository that the file item is located in.
 * @param $file_item
 *   The file item whose annotation should be retrieved.
 *
 * @return
 *   A structured array that consists of one element per line, with
 *   line numbers as keys (starting from 1) and a structured array as values,
 *   where each of them consists of elements with the following keys:
 *
 *   'username': The system specific VCS username of the last committer.
 *   'line': The contents of the line, without linebreak characters.
 *
 *   NULL is returned if the given item is not under version control,
 *   or was not under version control at the time of the given revision,
 *   or if it is not a file item at all, or if it is marked as binary file, or
 *   if the specific backend module does not implement retrieving annotations.
 */
function versioncontrol_fakevcs_get_file_annotation($repository, $file_item) {
  // In case the file is marked as text file:
  return array(
    1 => array(
      'username' => 'dries',
      'line'     => '<?php',
    ),
    2 => array(
      'username' => 'jpetso',
      'line'     => '// $Id$',
    ),
  );
}



/**
 * Implementation of [versioncontrol_backend]_insert_commit():
 * Insert additional commit data into the database.
 *
 * @param $commit
 *   A single commit array, like the ones returned
 *   by versioncontrol_get_commits().
 * @param $commit_actions
 *   A structured array containing the exact details of what happened to
 *   each item in this commit. The structure of this array is the same as
 *   the return value of versioncontrol_get_commit_actions().
 */
function versioncontrol_cvs_insert_commit($commit, $commit_actions) {
  // If nothing has to be stored in addition to the commit info that
  // versioncontrol_insert_commit() stores by itself, this function
  // doesn't have to be implemented by the backend.
  // If you've got stuff like file tables or whatever, it may come in handy.
  foreach ($commit_actions as $path => $action) {
    $revision = NULL;
    $source_revision = NULL;

    // If available, get item type and revision from the contained items.
    if (isset($action['current item'])) {
      $type = $action['current item']['type'];
      $revision = $action['current item']['revision'];
    }
    else {
      $type = $action['source items'][0]['type'];
      $source_commit_id = $action['source items'][0]['fakevcs_specific']['commit_id'];
      // of course, you need to store 'fakevcs_specific' items beforehand.
    }

    db_query(
      "INSERT INTO {versioncontrol_fakevcs_item_revisions}
       (commit_id, type, path, revision, action, source_revision)
       VALUES ('%d', '%d', '%s', '%s', '%d', '%d')",
      $commit['commit_id'], $type, $path, $revision, $action['action'],
      $source_commit_id
    );
  }
}
