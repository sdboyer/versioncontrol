<?php
// $Id$
/**
 * @file
 * Version Control API - An interface to version control systems
 * whose functionality is provided by pluggable back-end modules.
 *
 * Copyright 2007 by Jakob Petsovits <jpetso@gmx.at>
 *
 * Distributed under the GNU General Public Licence version 2 or higher,
 * as published by the FSF on http://www.gnu.org/copyleft/gpl.html
 */

// Optional capabilities that backend modules can provide.
define('VERSIONCONTROL_CAPABILITY_CREATE_REPOSITORY',       0);
define('VERSIONCONTROL_CAPABILITY_ACCOUNT_MANAGEMENT',      1);
define('VERSIONCONTROL_CAPABILITY_DIRECTORY_RESTRICTIONS',  2);
define('VERSIONCONTROL_CAPABILITY_BRANCH_TAG_RESTRICTIONS', 3);
define('VERSIONCONTROL_CAPABILITY_ATOMIC_COMMITS',          4);
define('VERSIONCONTROL_CAPABILITY_LIST_FILES',              5);

// VCS item types.
define('VERSIONCONTROL_ITEM_FILE',       0);
define('VERSIONCONTROL_ITEM_DIRECTORY',  1);

// VCS file types.
define('VERSIONCONTROL_ITEM_TEXT',       0);
define('VERSIONCONTROL_ITEM_BINARY',     1);

// VCS actions for a single item (file or directory) in a commit.
define('VERSIONCONTROL_ACTION_ADDED',    0);
define('VERSIONCONTROL_ACTION_MODIFIED', 1);
define('VERSIONCONTROL_ACTION_MOVED',    2);
define('VERSIONCONTROL_ACTION_COPIED',   3);
define('VERSIONCONTROL_ACTION_MERGED',   4);
define('VERSIONCONTROL_ACTION_DELETED',  5);


/**
 * Retrieve a set of repositories if they match the given constraints. If no
 * single repository matches these constraints, an empty array is returned.
 *
 * @param $constraints
 *   An optional array of constraints. Possible array elements are:
 *
 *   'vcs': An array of strings, like array('cvs', 'svn', 'git').
 *          If given, only commits for these backends will be returned.
 *   'repo_ids': An array of repository ids.
 *               If given, only the corresponding repositories will be returned.
 *
 * @return
 *   An array of repositories where the key of each element is the
 *   repository id. The corresponding value contains a structured array
 *   with the following keys:
 *
 *   'repo_id': The unique repository id.
 *   'name': The user-visible name of the repository.
 *   'vcs': The unique string identifier of the version control system
 *          that powers this repository.
 *   'root': The root directory of the repository. In most cases,
 *           this will be a local directory (e.g. '/var/repos/drupal'),
 *           but it may also be some specialized string for remote repository
 *           access. How this string may look like depends on the backend.
 *   'url_view' and 'url_diff': Not meant to be used directly, please refer
 *       to the versioncontrol_get_url_view() and versioncontrol_get_url_diff()
 *       functions if you need this functionality.
 *
 *   Additional elements may be added by specific version control system backends.
 */
versioncontrol_get_repositories($constraints = array()) {
}


/**
 * Retrieve a set of commits for the specified repository if they match the
 * given constraints. If no single commit matches these constraints,
 * an empty array is returned.
 *
 * @param $constraints
 *   An optional array of constraints. Possible array elements are:
 *
 *   'vcs': An array of strings, like array('cvs', 'svn', 'git').
 *          If given, only commits for these backends will be returned.
 *   'repo_ids': An array of repository ids. If given, only commits
 *               for the corresponding repositories will be returned.
 *   'branches': An array of strings, specified separately for each repository,
 *               like array($repo_id => array('HEAD', 'DRUPAL-5')).
 *               If given, only commits on the given branches will be returned.
 *   'tags': An array of strings, specified separately for each repository,
 *           like array($repo_id => array('DRUPAL-4-7--1-1', 'DRUPAL-5--1-3')).
 *           If given, only commits captured by these tags will be returned.
 *   'paths': An array of strings (item locations), specified separately
 *            for each repository, like
 *              array($repo_id => array(
 *                '/trunk/contributions/modules/versioncontrol',
 *                '/trunk/contributions/themes/b2',
 *              )).
 *            If given, only commits that affected this item (or its children,
 *            in case the item is a directory) will be returned.
 *   'commit_id_lower': A commit id. If given, the result set will not contain
 *                      commits earlier than this lower bound. Mind that
 *                      commit ids only correspond to chronological order
 *                      within the bounds of each repository.
 *   'commit_id_upper': A commit id. If given, the result set will not contain
 *                      commits later than this upper bound. Mind that
 *                      commit ids only correspond to chronological order
 *                      within the bounds of each repository.
 *   'date_lower': A Unix timestamp. If given, the result set will not contain
 *                 commits earlier than this lower bound.
 *   'date_upper': A Unix timestamp. If given, the result set will not contain
 *                 commits later than this upper bound.
 *   'uids': An array of Drupal user ids. If given, the result set will only
 *           contain commits that correspond to any of the specified users.
 *   'usernames': An array of system-specific usernames (the ones that the
 *                revision control systems themselves get to see).
 *                Specified separately for each repository, like
 *                array($repo_id => array('dww', 'jpetso')).
 *                If given, the result set will only contain commits that
 *                correspond to any of the specified users.
 *   '[xxx]_specific': An array of VCS specific constraints. How this array
 *                     looks like is defined by the corresponding backend
 *                     module ([xxx]_backend). Other backend modules won't
 *                     get to see this constraint, so in theory you can provide
 *                     one of those for each backend in one single query.
 *
 * @return
 *   An array of commits, reversely sorted by the time of the commit.
 *   Each element contains a structured array with the following keys:
 *
 *   'commit_id': The Drupal-specific commit identifier (a simple integer)
 *                which is unique among all commits in all repositories.
 *   'repository': The repository where this commit occurred.
 *                 This is a structured array, like a single element of
 *                 what is returned by versioncontrol_get_repositories().
 *   'date': The time when the revision was committed, given as Unix timestamp.
 *   'uid': The Drupal user id of the committer.
 *   'username': The system specific VCS username of the committer.
 *   'message': The commit message.
 *   'revision': The VCS specific commit identifier, like "1.2.2.4" in CVS,
 *               "27491" in Subversion or an SHA-1 key in various distributed
 *               version control systems.
 *
 *   Additional elements may be added by specific version control system backends.
 */
versioncontrol_get_commits($constraints = array()) {
}


/**
 * Retrieve a Drupal uid / VCS username mapping given a set of user ids.
 * Non-existing uids are discarded and don't appear in the result value.
 *
 * @param $uid_list
 *   An array containing Drupal user ids.
 * @param $repositories
 *   An array of structured arrays containing repository information,
 *   presumably a subset of what is returned by versioncontrol_get_repositories().
 *   If given, only usernames of this specific repository are retrieved.
 *
 * @return
 *   A structured array that looks like
 *   array($drupal_uid => array($repo_id => 'VCS username', ...), ...).
 *   If no system specific VCS usernames correlate to the given uids,
 *   an empty array is returned.
 */
versioncontrol_get_authors_by_uid($uid_list, $repositories = NULL) {
}

/**
 * Retrieve a Drupal uid / VCS username mapping given a set of usernames.
 * Non-existing usernames are discarded and don't appear in the result value.
 *
 * @param $usernames
 *   An array containing system specific VCS usernames. Specified separately
 *   for each repository, like array($repo_id => array('dww', 'jpetso')).
 *
 * @return
 *   A structured array that looks like
 *   array($drupal_uid => array($repo_id => 'VCS username', ...), ...).
 *   If no Drupal uids correlate to the given usernames,
 *   an empty array is returned.
 */
versioncontrol_get_authors_by_username($usernames) {
}


/**
 * Retrieve the URL of the repository viewer that displays the given item
 * in the given repository at the time of the given commit.
 *
 * @param $repository
 *   A structured array containing repository information, like a single
 *   element of what is returned by versioncontrol_get_repositories().
 * @param $commit
 *   The point in time when the item had the name $filepath. Remember, renaming
 *   operations can pretty much screw up unique item identification otherwise.
 * @param $path
 *   The item for which the view URL should actually be retrieved.
 *
 * @return
 *   The item view URL corresponding to the given arguments.
 *   An empty string is returned if no item view URL has been defined.
 */
versioncontrol_get_url_view($repository, $commit, $path) {
}

/**
 * Retrieve the URL of the repository viewer that displays the diff of the
 * given file in the given repository, showing the diff between the given
 * commit and the commit which preceded that one.
 *
 * @param $repository
 *   A structured array containing repository information, like a single
 *   element of what versioncontrol_get_repositories() returns.
 * @param $commit
 *   The newer commit of the two that should be diffed, and the point in time
 *   when the item had the name $filepath.
 * @param $filepath
 *   The file for which the diff URL should actually be retrieved.
 *
 * @return
 *   The diff URL corresponding to the given arguments.
 *   An empty string is returned if no diff URL has been defined.
 */
versioncontrol_get_url_diff($repository, $commit, $filepath) {
}


/**
 * Retrieves detailed information about what happened in a single commit.
 *
 * @param $commit
 *   The commit whose actions should be retrieved.
 *
 * @return
 *   A structured array containing the exact details of what happened to
 *   each item in this commit. Array keys are the current/new paths, also for
 *   VERSIONCONTROL_ACTION_DELETED actions even if the file actually doesn't
 *   exist anymore. The corresponding array values are again structured arrays
 *   and consist of elements with the following keys:
 *
 *   'type': Specifies the item type, which is either
 *           VERSIONCONTROL_ITEM_FILE or VERSIONCONTROL_ITEM_DIRECTORY.
 *   'action': Specifies how the item was modified.
 *             One of the predefined VERSIONCONTROL_ACTION_* values.
 *   'revision': The current/new (file-level) revision of the item.
 *               Given as a string, exists for all actions
 *               except VERSIONCONTROL_ACTION_DELETED.
 *   'previous revision': The (file-level) revision when this item last changed.
 *                        Given as a string, exists for all actions
 *                        except VERSIONCONTROL_ACTION_ADDED.
 *   'source path': The previous location of the item. Only exists for the
 *                  VERSIONCONTROL_ACTION_MOVED, VERSIONCONTROL_ACTION_COPIED
 *                  and VERSIONCONTROL_ACTION_MERGED actions.
 *   'source revision': Only exists for the VERSIONCONTROL_ACTION_MERGED action,
 *                      and specifies the last (file-level) revision of the
 *                      file that was merged into the current/new path.
 *   'modified': Boolean value, specifies if a file was modified in addition
 *               to the other action in the 'action' element of the array.
 *               Only exists for the VERSIONCONTROL_ACTION_MOVED
 *               and VERSIONCONTROL_ACTION_COPIED actions.
 */
versioncontrol_get_commit_actions($commit) {
  return versioncontrol_call_backend(
    $commit['repository']['vcs'], 'get_commit_actions', array($commit)
  );
}
