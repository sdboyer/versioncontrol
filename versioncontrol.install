<?php
// $Id$
/**
 * @file
 * Version Control API - An interface to version control systems
 * whose functionality is provided by pluggable back-end modules.
 *
 * Copyright 2006 by Karthik ("Zen", http://drupal.org/user/21209)
 * Copyright 2006, 2007 by Derek Wright ("dww", http://drupal.org/user/46549)
 * Copyright 2007 by Jakob Petsovits ("jpetso", http://drupal.org/user/56020)
 */

/**
 * Implementation of hook_install().
 */
function versioncontrol_install() {
  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      db_query("CREATE TABLE {versioncontrol_commits} (
        commit_id int unsigned NOT NULL default 0,
        repo_id int unsigned NOT NULL default 0,
        date bigint NOT NULL default 0,
        uid int unsigned NOT NULL default 0,
        username varchar(64) NOT NULL default '',
        directory varchar(255) NOT NULL default '',
        message text,
        revision varchar(255) NOT NULL default '',
        PRIMARY KEY (commit_id),
        KEY repo_id (repo_id),
        KEY uid (uid),
        KEY date (date)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");

      db_query("CREATE TABLE {versioncontrol_branches} (
        branch_id int unsigned NOT NULL default 0,
        repo_id int unsigned NOT NULL default 0,
        branch_name varchar(255) NOT NULL default '',
        PRIMARY KEY (branch_id),
        UNIQUE KEY (repo_id, branch_name)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");

      db_query("CREATE TABLE {versioncontrol_branch_operations} (
        branch_op_id int unsigned NOT NULL default 0,
        branch_id int unsigned NOT NULL default 0,
        action tinyint unsigned NOT NULL default 0,
        date bigint NOT NULL default 0,
        uid int unsigned NOT NULL default 0,
        username varchar(64) NOT NULL default '',
        directory varchar(255) NOT NULL default '',
        PRIMARY KEY (branch_op_id),
        KEY (branch_id)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");

      db_query("CREATE TABLE {versioncontrol_tag_operations} (
        tag_op_id int unsigned NOT NULL default 0,
        repo_id int unsigned NOT NULL default 0,
        tag_name varchar(255) NOT NULL default '',
        action tinyint unsigned NOT NULL default 0,
        date bigint NOT NULL default 0,
        uid int unsigned NOT NULL default 0,
        username varchar(64) NOT NULL default '',
        directory varchar(255) NOT NULL default '',
        message text,
        PRIMARY KEY (tag_op_id),
        KEY (repo_id, tag_name)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");

      db_query("CREATE TABLE {versioncontrol_repositories} (
        repo_id int unsigned NOT NULL default 0,
        name varchar(255) NOT NULL default '',
        vcs varchar(8) NOT NULL default '',
        root varchar(255) NOT NULL default '',
        authorization_method varchar(64) NOT NULL default '',
        url_backend varchar(64) NOT NULL default '',
        PRIMARY KEY (repo_id),
        UNIQUE KEY name (name)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");

      db_query("CREATE TABLE {versioncontrol_repository_urls} (
        repo_id int unsigned NOT NULL default 0,
        commit_view varchar(255) NOT NULL default '',
        file_log_view varchar(255) NOT NULL default '',
        file_view varchar(255) NOT NULL default '',
        directory_view varchar(255) NOT NULL default '',
        diff varchar(255) NOT NULL default '',
        tracker varchar(255) NOT NULL default '',
        PRIMARY KEY (repo_id)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");

      db_query("CREATE TABLE {versioncontrol_repository_metadata} (
        repo_id int unsigned NOT NULL default 0,
        weight smallint NOT NULL default 0,
        registration_message text,
        PRIMARY KEY (repo_id)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");

      db_query("CREATE TABLE {versioncontrol_accounts} (
        uid int unsigned NOT NULL default 0,
        repo_id int unsigned NOT NULL default 0,
        username varchar(64) NOT NULL default '',
        PRIMARY KEY (uid, repo_id),
        UNIQUE KEY (repo_id, username)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      break;

    case 'pgsql':
      db_query("CREATE TABLE {versioncontrol_commits} (
        commit_id int NOT NULL default 0,
        repo_id int NOT NULL default 0,
        date bigint NOT NULL default 0,
        uid int NOT NULL default 0,
        username varchar(64) NOT NULL default '',
        directory varchar(255) NOT NULL default '',
        message text,
        revision varchar(255) NOT NULL default '',
        PRIMARY KEY (commit_id)
      )");
      db_query("CREATE INDEX {versioncontrol_commits}_repo_id_idx ON {versioncontrol_commits} (repo_id)");
      db_query("CREATE INDEX {versioncontrol_commits}_uid_idx ON {versioncontrol_commits} (uid)");
      db_query("CREATE INDEX {versioncontrol_commits}_date_idx ON {versioncontrol_commits} (date)");

      db_query("CREATE TABLE {versioncontrol_branches} (
        branch_id int NOT NULL default 0,
        repo_id int NOT NULL default 0,
        branch_name varchar(255) NOT NULL default '',
        PRIMARY KEY (branch_id),
        UNIQUE (repo_id, branch_name)
      )");

      db_query("CREATE TABLE {versioncontrol_branch_operations} (
        branch_op_id int NOT NULL default 0,
        branch_id int NOT NULL default 0,
        action smallint NOT NULL default 0,
        date bigint NOT NULL default 0,
        uid int NOT NULL default 0,
        username varchar(64) NOT NULL default '',
        directory varchar(255) NOT NULL default '',
        PRIMARY KEY (branch_op_id)
      )");
      db_query("CREATE INDEX {versioncontrol_branch_operations}_branch_id_idx
                ON {versioncontrol_branch_operations} (branch_id)");

      db_query("CREATE TABLE {versioncontrol_tag_operations} (
        tag_op_id int NOT NULL default 0,
        repo_id int NOT NULL default 0,
        tag_name varchar(255) NOT NULL default '',
        action smallint NOT NULL default 0,
        date bigint NOT NULL default 0,
        uid int NOT NULL default 0,
        username varchar(64) NOT NULL default '',
        directory varchar(255) NOT NULL default '',
        message text,
        PRIMARY KEY (branch_op_id)
      )");
      db_query("CREATE INDEX {versioncontrol_tag_operations}_tag_id_idx
                ON {versioncontrol_tag_operations} (tag_id)");

      db_query("CREATE TABLE {versioncontrol_repositories} (
        repo_id int NOT NULL default 0,
        name varchar(255) NOT NULL default '',
        vcs varchar(8) NOT NULL default '',
        root varchar(255) NOT NULL default '',
        authorization_method varchar(64) NOT NULL default '',
        url_backend varchar(64) NOT NULL default '',
        PRIMARY KEY (repo_id),
        UNIQUE (name)
      )");

      db_query("CREATE TABLE {versioncontrol_repository_urls} (
        repo_id int NOT NULL default 0,
        commit_view varchar(255) NOT NULL default '',
        file_log_view varchar(255) NOT NULL default '',
        file_view varchar(255) NOT NULL default '',
        directory_view varchar(255) NOT NULL default '',
        diff varchar(255) NOT NULL default '',
        tracker varchar(255) NOT NULL default '',
        PRIMARY KEY (repo_id)
      )");

      db_query("CREATE TABLE {versioncontrol_repository_metadata} (
        repo_id int NOT NULL default 0,
        weight smallint NOT NULL default 0,
        registration_message text,
        PRIMARY KEY (repo_id)
      )");

      db_query("CREATE TABLE {versioncontrol_accounts} (
        uid int NOT NULL default 0,
        repo_id int NOT NULL default 0,
        username varchar(64) NOT NULL default '',
        PRIMARY KEY (uid, repo_id),
        UNIQUE (repo_id, username)
      )");
      break;
  }
}


/**
 * Implementation of hook_uninstall().
 */
function versioncontrol_uninstall() {
  $variables = array(
    'versioncontrol_email_address',
    'versioncontrol_allow_unauthorized_access',
    'versioncontrol_registration_message_unauthorized',
    'versioncontrol_registration_message_authorized',
    'versioncontrol_admin_account_pager',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }

  db_query('DROP TABLE {versioncontrol_commits}');
  db_query('DROP TABLE {versioncontrol_branches}');
  db_query('DROP TABLE {versioncontrol_branch_operations}');
  db_query('DROP TABLE {versioncontrol_tag_operations}');
  db_query('DROP TABLE {versioncontrol_repositories}');
  db_query('DROP TABLE {versioncontrol_repository_urls}');
  db_query('DROP TABLE {versioncontrol_accounts}');
}


// Update functions.

function versioncontrol_update_1() {
  $ret = array();

  // Remove the unique key (repo_id, directory) because there can be multiple
  // "empty" projects with keys (0, ''). Instead, have a non-unique index.
  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      $ret[] = update_sql("ALTER TABLE {versioncontrol_repository_urls}
                           ADD COLUMN file_log_view varchar(255) NOT NULL default ''
                           AFTER commit_view");
      break;
    case 'pgsql':
      $ret[] = update_sql("ALTER TABLE {versioncontrol_repository_urls}
                           ADD COLUMN file_log_view varchar(255) NOT NULL default ''");
      break;
  }
  return $ret;
}
