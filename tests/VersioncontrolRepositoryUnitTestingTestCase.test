<?php
// $Id$
/**
 * @file
 * Unit tests for repository class
 */

/**
 * Unit tests for VersioncontrolRepository class
 */
class VersioncontrolRepositoryUnitTestingTestCase extends DrupalWebTestCase {

  public $controller;

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      // FIXME
      'name' => t('Repository class unit tests'),
      'description' => t('Unit tests for the VersioncontrolRepository class.'),
      'group' => t('Version Control'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    // load core and fake test backend modules
    parent::setUp('dbtng', 'autoload', 'versioncontrol', 'versioncontrol_test');
    $this->controller = new VersioncontrolRepositoryController();
  }

  public function testGetRepositoryEmptyParam() {
    $repo_id = '';
    $repository = $this->controller->load(array($repo_id));
    $this->assertNull($repository, t('Make sure we get a NULL when trying to get a repository with empty repo_id'), 'getRepository');
  }

  public function testGetRepositoryNullParam() {
    $repo_id = NULL;
    $repository = $this->controller->load(array($repo_id));
    $this->assertNull($repository, t('Make sure we get a NULL when trying to get a repository with a NULL repo_id'), 'getRepository');
  }

  public function testGetRepositoryNotFound() {
    $repo_id = -1;
    $repository = $this->controller->load(array($repo_id));
    $this->assertNull($repository, t('Make sure we get a NULL when trying to get a repository which do not exit'), 'getRepository');
  }

  public function testGetRepositoryFound() {
    $backends = versioncontrol_get_backends();
    $data = array(
      'name' => 'test repository',
      'vcs' => 'test',
      'backend' => $backends['test'],
    );
    $repo = $backends['test']->buildObject('repo', $data);
    $repo->insert();
    $repositories = $this->controller->load(array($repo->repo_id));
    $this->assertTrue(is_a($repositories[$repo->repo_id], 'VersioncontrolRepository'), t('Make sure we get a valid return when passing a good repo_id.'), 'getRepository');
  }
}
